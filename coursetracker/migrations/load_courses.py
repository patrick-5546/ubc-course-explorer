# Generated by Django 3.1.13 on 2021-07-21 23:32

import json
import os

from django.db import IntegrityError, migrations, transaction

from .ubc_course_explorer_data.scripts.update_data import (
    AVAILABLE_COURSES_FN, COURSE_INFORMATION_FN, COURSE_STATISTICS_FN, GRADE_DISTRIBUTIONS_FN
)

DATA_DIR_PATH = os.path.join(os.path.join('coursetracker', 'migrations'), 'ubc_course_explorer_data')


def load_courses_into_db(apps, schema_editor):
    '''Saves all courses in AVAIL_COURSES to the database.'''
    # We can't import the Course model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Course = apps.get_model('coursetracker', 'Course')

    print('')  # so that print statements start on new line
    load_courses(Course)


def load_courses(Course):
    avail_courses, course_info, course_stats, grade_distrs = load_data_files()
    for subject, course_labels in avail_courses.items():
        print(f"\tLoading database with courses in {subject}")

        for course_label in course_labels:
            save_course_instance(Course, f"{subject} {course_label}", course_info, course_stats, grade_distrs)


class Migration(migrations.Migration):

    # manually set to the last automatically generated migration (the ones that start with numbers)
    dependencies = [
        ('coursetracker', '0016_auto_20210723_1634'),
    ]

    operations = [
        migrations.RunPython(load_courses_into_db)
    ]


def load_data_files():
    '''Loads the data files into global variables.'''
    return (_load_json(AVAILABLE_COURSES_FN), _load_json(COURSE_INFORMATION_FN),
            _load_json(COURSE_STATISTICS_FN), _load_json(GRADE_DISTRIBUTIONS_FN))


def _load_json(filename):
    '''Returns the objects stored in a json file.'''
    with open(os.path.join(DATA_DIR_PATH, filename), 'r') as json_file:
        return json.load(json_file)


def save_course_instance(Course, course_name, course_info, course_stats, grade_distrs):
    '''Uses the course's information in the global variables to create and save a Course object to the database.'''
    stats = course_stats[course_name]
    avg = stats['average']
    avg5 = stats['average_past_5_yrs']
    stdev = stats['stdev']
    minavg = stats['min_course_avg']
    maxavg = stats['max_course_avg']
    # print(stats)

    distribution = grade_distrs[course_name][0]  # first element in list will be from most recent term
    grades = _order_grades(distribution['grades'])
    term = f"{distribution['year']}{distribution['session']}"
    name = distribution['course_title']  # more up to date than in stats, as it is from the most recent term
    # print(distribution)

    # the source for course_info does not have details
    # there are 4 characters in the number/detail if there is a detail
    subject, course = course_name.split(' ')
    course_name_no_detail = course_name[:-1] if len(course) == 4 else course_name
    info = course_info[course_name_no_detail] if course_name_no_detail in course_info else {}
    cred = info['cred'] if 'cred' in info and info['cred'] is not None else 'n/a'
    desc = info['desc'] if 'desc' in info and info['desc'] is not None else 'n/a'
    prer = info['prer'] if 'prer' in info and info['prer'] is not None else 'n/a'
    crer = info['crer'] if 'crer' in info and info['crer'] is not None else 'n/a'
    # print(info)

    link = ('https://courses.students.ubc.ca/cs/courseschedule?pname=subjarea&tname=subj-course&'
            f"dept={subject}&course={course}")

    try:
        with transaction.atomic():
            Course.objects.create(course_name=course_name, average=avg, five_year_average=avg5, lowest_average=minavg,
                                  highest_average=maxavg, standard_deviation=stdev, distribution=grades,
                                  distribution_term=term, sub_name=name, number_of_credits=cred,
                                  course_description=desc, prerequistes_description=prer, corequisites_description=crer,
                                  course_link=link)
    except IntegrityError:
        print(f"\t\tCould not save {course_name} into database")
        pass


def _order_grades(distribution_dict):
    '''Returns a list of the grade distribution. There are 11 elements, in the following order:
        [<50%, 50-54%, 55-59%, 60-63%, 64-67%, 68-71%, 72-75%, 76-79%, 80-84%, 85-89%, 90-100%]
    '''
    grades = list()

    # distribution_dict.values() is already in increasing order, except '<50%' is at the end
    #   - might be because it doesn't start with a number
    grades.append(distribution_dict['<50%'])
    grades.extend(list(distribution_dict.values())[:-1])

    return grades
